generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  email      String   @unique
  password   String
  image      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  name       String?
  myList     MyList[]
  isVerified Boolean  @default(false)
}

enum Genre {
  ACTION
  ADVENTURE
  ANIMATION
  BIOGRAPHY
  COMEDY
  CRIME
  DRAMA
  FANTASY
  HORROR
  MYSTERY
  ROMANCE
  SCIFI
  THRILLER
}

model Movies {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  imdb        Float
  rating      String?
  cast        String[]
  release     DateTime
  clip        String
  thumbnail   String
  logo        String
  clipImage   String
  description String
  url         String
  length      String
  genre       Genre[]
}

model Series {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  imdb        Float
  rating      String?
  cast        String[]
  thumbnail   String
  logo        String
  description String
  genre       Genre[]
  release     DateTime
  seasons     Season[]
  videos      Video[]
}

model Season {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  number      Int
  release     DateTime
  description String
  episodes    Episode[]
  seriesId    String    @db.ObjectId
  series      Series    @relation(fields: [seriesId], references: [id])
}

model Episode {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  number      Int
  seasonId    String @db.ObjectId
  season      Season @relation(fields: [seasonId], references: [id])
  name        String
  description String
  length      String
  thumbnail   String
  url         String
}

model Video {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  image    String
  url      String
  seriesId String @db.ObjectId
  series   Series @relation(fields: [seriesId], references: [id])
}

model MyList {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  contentId String   @db.ObjectId
  userId    String   @db.ObjectId
  isSeries  Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, contentId])
}
